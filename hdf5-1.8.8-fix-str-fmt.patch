diff -urN hdf5-1.8.8/tools/h5import/h5import.c hdf5-1.8.8-patched/tools/h5import/h5import.c
--- hdf5-1.8.8/tools/h5import/h5import.c	2011-11-08 09:11:36.000000000 +1100
+++ hdf5-1.8.8-patched/tools/h5import/h5import.c	2011-12-02 01:51:26.268739881 +1100
@@ -65,7 +65,7 @@
      * validate the number of command line arguments
      */
     if (argc < 2) {
-        (void) fprintf(stderr, err1, argc);
+        (void) fprintf(stderr, "%s", err1, argc);
         usage(argv[0]);
         goto err;
     }
@@ -95,7 +95,7 @@
                 opt.fcount++;
             }
             else {
-                (void) fprintf(stderr, err9, argv[i]);
+                (void) fprintf(stderr, "%s", err9, argv[i]);
                 goto err;
             }
 
@@ -127,7 +127,7 @@
 
         case 8: /* read dimensions */
             if (parseDimensions(in, argv[i]) == -1) {
-                (void) fprintf(stderr, err6, argv[i]);
+                (void) fprintf(stderr, "%s", err6, argv[i]);
                 goto err;
             }
             break;
@@ -137,7 +137,7 @@
 
         case 10: /* read path name */
             if (parsePathInfo(&in->path, argv[i]) == -1) {
-                (void) fprintf(stderr, err5, argv[i]);
+                (void) fprintf(stderr, "%s", err5, argv[i]);
                 goto err;
             }
             break;
@@ -147,7 +147,7 @@
 
         case 12: /* read data type */
             if (getInputClass(in, argv[i]) == -1) {
-                (void) fprintf(stderr, err7, argv[i]);
+                (void) fprintf(stderr, "%s", err7, argv[i]);
                 goto err;
             }
 
@@ -164,7 +164,7 @@
 
         case 14: /* read data size */
             if (getInputSize(in, (int) HDstrtol(argv[i], NULL, BASE_10)) == -1) {
-                (void) fprintf(stderr, err8, argv[i]);
+                (void) fprintf(stderr, "%s", err8, argv[i]);
                 goto err;
             }
             /*set default value for output-size */
@@ -272,7 +272,7 @@
         }
 
         if (token == ERR)
-            (void) fprintf(stderr, err1, s);
+            (void) fprintf(stderr, "%s", err1, s);
     }
     else { /* filename */
         token = FILNAME;
@@ -318,7 +318,7 @@
     if (in->inputClass == 4 /* "IN" */|| in->inputClass == 3 /* "FP" */|| in->inputClass == 7 /* "UIN" */) {
 
         if ((strm = HDfopen(infile, READ_OPEN_FLAGS)) == NULL) {
-            (void) fprintf(stderr, err1, infile);
+            (void) fprintf(stderr, "%s", err1, infile);
             return (-1);
         }
     }
@@ -328,7 +328,7 @@
      */
     else {
         if ((strm = HDfopen(infile, "r")) == NULL) {
-            (void) fprintf(stderr, err1, infile);
+            (void) fprintf(stderr, "%s", err1, infile);
             return (-1);
         }
     }
@@ -337,13 +337,13 @@
     case 0: /*  TEXTIN */
     case 4: /*  IN  */
         if (allocateIntegerStorage(in) == -1) {
-            (void) fprintf(stderr, err2, infile);
+            (void) fprintf(stderr, "%s", err2, infile);
             HDfclose(strm);
             return (-1);
         }
 
         if (readIntegerData(strm, in) == -1) {
-            (void) fprintf(stderr, err4, infile);
+            (void) fprintf(stderr, "%s", err4, infile);
             HDfclose(strm);
             return (-1);
         }
@@ -353,14 +353,14 @@
     case 2: /*  TEXTFPE  */
     case 3: /*  FP  */
         if (allocateFloatStorage(in) == -1) {
-            (void) fprintf(stderr, err3, infile);
+            (void) fprintf(stderr, "%s", err3, infile);
             HDfclose(strm);
             return (-1);
 
         }
 
         if (readFloatData(strm, in) == -1) {
-            (void) fprintf(stderr, err5, infile);
+            (void) fprintf(stderr, "%s", err5, infile);
             HDfclose(strm);
             return (-1);
         }
@@ -369,7 +369,7 @@
     case 5: /*  STR  */
 
         if (processStrData(strm, in, file_id) == -1) {
-            (void) fprintf(stderr, err11, infile);
+            (void) fprintf(stderr, "%s", err11, infile);
             HDfclose(strm);
             return (-1);
         }
@@ -379,12 +379,12 @@
     case 6: /* TEXTUIN */
     case 7: /* UIN */
         if (allocateUIntegerStorage(in) == -1) {
-            (void) fprintf(stderr, err6, infile);
+            (void) fprintf(stderr, "%s", err6, infile);
             HDfclose(strm);
             return (-1);
         }
         if (readUIntegerData(strm, in) == -1) {
-            (void) fprintf(stderr, err7, infile);
+            (void) fprintf(stderr, "%s", err7, infile);
             HDfclose(strm);
             return (-1);
         }
@@ -1116,20 +1116,20 @@
      */
 
     if ((strm = HDfopen(infile, "r")) == NULL) {
-        (void) fprintf(stderr, err1, infile);
+        (void) fprintf(stderr, "%s", err1, infile);
         return (-1);
     }
 
     while (fscanf(strm, "%s", key) == 1) {
         if ((kindex = mapKeywordToIndex(key)) == -1) {
-            (void) fprintf(stderr, err2, infile);
+            (void) fprintf(stderr, "%s", err2, infile);
             HDfclose(strm);
             return (-1);
         }
         switch (kindex) {
         case 0: /* PATH */
             if (in->configOptionVector[PATH] == 1) {
-                (void) fprintf(stderr, err3a, infile);
+                (void) fprintf(stderr, "%s", err3a, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1139,7 +1139,7 @@
                 return (-1);
             }
             if (parsePathInfo(&in->path, temp) == -1) {
-                (void) fprintf(stderr, err3b, infile);
+                (void) fprintf(stderr, "%s", err3b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1148,7 +1148,7 @@
 
         case 1: /* INPUT-CLASS */
             if (in->configOptionVector[INPUT_CLASS] == 1) {
-                (void) fprintf(stderr, err4a, infile);
+                (void) fprintf(stderr, "%s", err4a, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1159,7 +1159,7 @@
                 return (-1);
             }
             if (getInputClass(in, temp) == -1) {
-                (void) fprintf(stderr, err4b, infile);
+                (void) fprintf(stderr, "%s", err4b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1180,7 +1180,7 @@
 
         case 2: /* INPUT-SIZE */
             if (in->configOptionVector[INPUT_SIZE] == 1) {
-                (void) fprintf(stderr, err5a, infile);
+                (void) fprintf(stderr, "%s", err5a, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1190,7 +1190,7 @@
                 return (-1);
             }
             if (getInputSize(in, ival) == -1) {
-                (void) fprintf(stderr, err5b, infile);
+                (void) fprintf(stderr, "%s", err5b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1203,13 +1203,13 @@
 
         case 3: /* RANK */
             if (in->configOptionVector[RANK] == 1) {
-                (void) fprintf(stderr, err6a, infile);
+                (void) fprintf(stderr, "%s", err6a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getRank(in, strm) == -1) {
-                (void) fprintf(stderr, err6b, infile);
+                (void) fprintf(stderr, "%s", err6b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1218,18 +1218,18 @@
 
         case 4: /* DIMENSION-SIZES */
             if (in->configOptionVector[DIM] == 1) {
-                (void) fprintf(stderr, err7a, infile);
+                (void) fprintf(stderr, "%s", err7a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (in->configOptionVector[RANK] == 0) {
-                (void) fprintf(stderr, err7b, infile);
+                (void) fprintf(stderr, "%s", err7b, infile);
                 HDfclose(strm);
                 return (-1);
             }
             if (getDimensionSizes(in, strm) == -1) {
-                (void) fprintf(stderr, err7c, infile);
+                (void) fprintf(stderr, "%s", err7c, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1238,13 +1238,13 @@
 
         case 5: /* OUTPUT-CLASS */
             if (in->configOptionVector[OUTPUT_CLASS] == 1) {
-                (void) fprintf(stderr, err8a, infile);
+                (void) fprintf(stderr, "%s", err8a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getOutputClass(in, strm) == -1) {
-                (void) fprintf(stderr, err8b, infile);
+                (void) fprintf(stderr, "%s", err8b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1253,13 +1253,13 @@
 
         case 6: /* OUTPUT-SIZE */
             if (in->configOptionVector[OUTPUT_SIZE] == 1) {
-                (void) fprintf(stderr, err9a, infile);
+                (void) fprintf(stderr, "%s", err9a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getOutputSize(in, strm) == -1) {
-                (void) fprintf(stderr, err9b, infile);
+                (void) fprintf(stderr, "%s", err9b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1268,13 +1268,13 @@
 
         case 7: /* OUTPUT-ARCHITECTURE */
             if (in->configOptionVector[OUTPUT_ARCH] == 1) {
-                (void) fprintf(stderr, err10a, infile);
+                (void) fprintf(stderr, "%s", err10a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getOutputArchitecture(in, strm) == -1) {
-                (void) fprintf(stderr, err10b, infile);
+                (void) fprintf(stderr, "%s", err10b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1283,13 +1283,13 @@
 
         case 8: /* OUTPUT-BYTE-ORDER */
             if (in->configOptionVector[OUTPUT_B_ORDER] == 1) {
-                (void) fprintf(stderr, err11a, infile);
+                (void) fprintf(stderr, "%s", err11a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getOutputByteOrder(in, strm) == -1) {
-                (void) fprintf(stderr, err11b, infile);
+                (void) fprintf(stderr, "%s", err11b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1298,19 +1298,19 @@
 
         case 9: /* CHUNKED-DIMENSION-SIZES */
             if (in->configOptionVector[CHUNK] == 1) {
-                (void) fprintf(stderr, err12a, infile);
+                (void) fprintf(stderr, "%s", err12a, infile);
                 HDfclose(strm);
                 return (-1);
             }
             /* cant appear before dimension sizes have been provided */
             if (in->configOptionVector[DIM] == 0) {
-                (void) fprintf(stderr, err12b, infile);
+                (void) fprintf(stderr, "%s", err12b, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getChunkedDimensionSizes(in, strm) == -1) {
-                (void) fprintf(stderr, err12c, infile);
+                (void) fprintf(stderr, "%s", err12c, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1319,13 +1319,13 @@
 
         case 10: /* COMPRESSION-TYPE */
             if (in->configOptionVector[COMPRESS] == 1) {
-                (void) fprintf(stderr, err13a, infile);
+                (void) fprintf(stderr, "%s", err13a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getCompressionType(in, strm) == -1) {
-                (void) fprintf(stderr, err13b, infile);
+                (void) fprintf(stderr, "%s", err13b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1339,13 +1339,13 @@
 
         case 11: /* COMPRESSION-PARAM */
             if (in->configOptionVector[COMPRESS_PARAM] == 1) {
-                (void) fprintf(stderr, err14a, infile);
+                (void) fprintf(stderr, "%s", err14a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getCompressionParameter(in, strm) == -1) {
-                (void) fprintf(stderr, err14b, infile);
+                (void) fprintf(stderr, "%s", err14b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1359,13 +1359,13 @@
 
         case 12: /* EXTERNAL-STORAGE */
             if (in->configOptionVector[EXTERNAL] == 1) {
-                (void) fprintf(stderr, err15a, infile);
+                (void) fprintf(stderr, "%s", err15a, infile);
                 HDfclose(strm);
                 return (-1);
             }
 
             if (getExternalFilename(in, strm) == -1) {
-                (void) fprintf(stderr, err15b, infile);
+                (void) fprintf(stderr, "%s", err15b, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1374,18 +1374,18 @@
 
         case 13: /* MAXIMUM-DIMENSIONS */
             if (in->configOptionVector[EXTEND] == 1) {
-                (void) fprintf(stderr, err16a, infile);
+                (void) fprintf(stderr, "%s", err16a, infile);
                 HDfclose(strm);
                 return (-1);
             }
             /* cant appear before dimension sizes have been provided */
             if (in->configOptionVector[DIM] == 0) {
-                (void) fprintf(stderr, err16b, infile);
+                (void) fprintf(stderr, "%s", err16b, infile);
                 HDfclose(strm);
                 return (-1);
             }
             if (getMaximumDimensionSizes(in, strm) == -1) {
-                (void) fprintf(stderr, err16c, infile);
+                (void) fprintf(stderr, "%s", err16c, infile);
                 HDfclose(strm);
                 return (-1);
             }
@@ -1402,7 +1402,7 @@
      */
 
     if (validateConfigurationParameters(in) == -1) {
-        (void) fprintf(stderr, err17, infile);
+        (void) fprintf(stderr, "%s", err17, infile);
         HDfclose(strm);
         return (-1);
     }
@@ -1494,7 +1494,7 @@
 
     token = HDstrtok (temp, delimiter);
     if (HDstrlen(token) >= MAX_PATH_NAME_LENGTH) {
-        (void) fprintf(stderr, err1);
+        (void) fprintf(stderr, "%s", err1);
         return (-1);
     }
     HDstrcpy(path->group[i++],token);
@@ -1504,7 +1504,7 @@
         if (token == NULL)
             break;
         if (HDstrlen(token) >= MAX_PATH_NAME_LENGTH) {
-            (void) fprintf(stderr, err1);
+            (void) fprintf(stderr, "%s", err1);
             return (-1);
         }
         HDstrcpy(path->group[i++],token);
@@ -2288,7 +2288,7 @@
     {
         if ((file_id = H5Fopen(opt->outfile, H5F_ACC_RDWR, H5P_DEFAULT)) < 0) {
             if ((file_id = H5Fcreate(opt->outfile, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT)) == FAIL) {
-                (void) fprintf(stderr, err1, opt->outfile);
+                (void) fprintf(stderr, "%s", err1, opt->outfile);
                 return (-1);
             }
         }
@@ -2299,13 +2299,13 @@
         in = &(opt->infiles[k].in);
         if (opt->infiles[k].config == 1) {
             if (processConfigurationFile(opt->infiles[k].configfile, in) == -1) {
-                (void) fprintf(stderr, err2, opt->infiles[k].configfile);
+                (void) fprintf(stderr, "%s", err2, opt->infiles[k].configfile);
                 return (-1);
             }
         }
 
         if (processDataFile(opt->infiles[k].datafile, in, file_id) == -1) {
-            (void) fprintf(stderr, err3, opt->infiles[k].datafile);
+            (void) fprintf(stderr, "%s", err3, opt->infiles[k].datafile);
             return (-1);
         }
 
